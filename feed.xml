<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://hjel2.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://hjel2.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-30T17:39:12+00:00</updated><id>https://hjel2.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Cambridge Computer Science applications</title><link href="https://hjel2.github.io/blog/2024/applying/" rel="alternate" type="text/html" title="Cambridge Computer Science applications"/><published>2024-08-14T00:00:00+00:00</published><updated>2024-08-14T00:00:00+00:00</updated><id>https://hjel2.github.io/blog/2024/applying</id><content type="html" xml:base="https://hjel2.github.io/blog/2024/applying/"><![CDATA[<p>This aims to provide general information about the application process: specifically highlighting that which is often miscommunicated.</p> <h1 id="what-can-i-do-to-be-a-stronger-applicant">What can I do to be a stronger applicant?</h1> <p>Everyone wants to know what they have to do to get an offer. The main criteria are: working hard, being smart and knowing a bit of programming. Everything else is secondary or serves only to demonstrate these.</p> <h2 id="study-hard-and-be-smart">Study hard and be smart</h2> <p>Everyone who gets an offer works hard and is genuinely smart. You <em>need</em> to work hard at A Level, especially maths. The more you do and the more you know, the better. Even work which is not directly related to computer science (Maths, Physics, Chemistry etc) is helpful and looks very good on a personal statement. Doing past paper questions, competitions, getting good exam results are all worthwhile.</p> <h2 id="know-how-to-program">Know how to program</h2> <p>Programming is integrally tied to computer science. You <em>technically</em> don’t need to know how to program to get an offer: but it will help a lot. I’d strongly recommend learning how to program. This doesn’t mean memorising library functions: but knowing how to implement some things, how to implement/invent simple algorithms and ‘think like a programmer’.</p> <h2 id="read-some-books">Read some books</h2> <p>Reading books is a very ‘stereotypical’ thing to be told to do. This is less relevant for computer science than other degrees, which have smaller practical aspects. Here are my recommendations for computer science books (in-order):</p> <ul> <li>Introduction to Algorithms</li> <li>Software and Security Engineering </li> </ul> <p>You can usually find any these online by searching the name with <code class="language-plaintext highlighter-rouge">pdf</code> as a suffix.</p> <h2 id="do-some-cool-projects">Do some cool projects</h2> <p>If you can think of some projects to do, then do them! If I was an interviewer, this would be most impressive for me. Finding a sufficiently difficult and well-scoped project to do is challenging.</p> <h2 id="go-to-events">Go to events</h2> <p>If there are events which you can do, go for them! They can be very good.</p> <p>Some examples which come to mind are:</p> <ul> <li>game jams</li> <li>hackathons</li> <li>CTF’s</li> <li>summer camps</li> </ul> <h2 id="learn-a-new-language">Learn a new language</h2> <p>Depth is <em>significantly</em> preferable to breadth: it’s far better to know how to program or to know one language inside out than know three at a surface-level. If you know how to program very well and are very confident in one language, then learning another strengthens your application.</p> <p>My recommendations for languages are in this order:</p> <ol> <li>a ‘simple’ language i.e. <a href="https://wiki.python.org/moin/IntroductoryBooks">Python</a></li> <li>an OOP language i.e. Java or C#</li> <li>an old language i.e. C++</li> <li>a difficult language i.e. <a href="https://doc.rust-lang.org/book/">Rust</a>, OCaml, Haskell</li> </ol> <p>It’s <em>much</em> better to know how to program than to learn different languages. Learning how to program will help at interview and A Level. Learning different languages will be confusing due to syntax differences. I’d <em>strongly recommend</em> not skipping stages.</p> <hr/> <h1 id="personal-statement">Personal Statement</h1> <p>Personal statements are difficult to write. Everyone has a lot of trouble with theirs.</p> <p>I would recommend writing a personal statement as follows:</p> <ol> <li>bulletpoint <em>everything</em></li> <li>arrange the bulletpoints into sections</li> <li>write paragraphs from those bulletpoints</li> <li><strong>iterate with competent people</strong></li> </ol> <p>Iterating with competent people is by far the most important. Choose a small group (1-2) of highly competent teachers to send your personal statement to and get feedback from. These teachers should know about either maths or computer science. Iterating with friends is useful: good friends care more; smarter friends generally give better feedback. Students are more willing to swap personal statements as the deadline approaches.</p> <h1 id="choosing-a-college">Choosing a College</h1> <p>This can feel daunting: don’t worry. The only ‘bad’ choice is an open application.</p> <p>Things to consider:</p> <ul> <li>accommodation</li> <li>proximity to town/CL</li> <li>new/old</li> <li><a href="https://www.undergraduate.study.cam.ac.uk/apply/statistics">subject distribution</a> – how many other computer scientists there are and whether it’s STEM-centric or not etc</li> </ul> <p><strong>College choice does not meaningfully or predictably affect overall probability of an offer.</strong> Pooling exists to deal with oversubscribed colleges. There is also variety in quality of applicants between colleges.</p> <hr/> <h1 id="dont-get-filtered-by-ctmua">Don’t get filtered by CTMUA</h1> <p>After applying, but before the interview, you will have to sit a test called CTMUA. There are a <em>lot</em> of candidates and this is just designed to filter out a lot early on. The past questions can feel easy, but don’t underestimate it: <a href="https://www.physicsandmathstutor.com/admissions/tmua/">revise for it properly</a> and don’t get filtered.</p> <p>You should:</p> <ul> <li>read and understand the <a href="https://www.physicsandmathstutor.com/pdf-pages/?pdf=https%3A%2F%2Fpmt.physicsandmathstutor.com%2Fdownload%2FAdmissions%2FTMUA%2FTMUA%20Notes%20on%20Logic%20and%20Proof%202021.pdf">notes</a> and <a href="https://www.physicsandmathstutor.com/pdf-pages/?pdf=https%3A%2F%2Fpmt.physicsandmathstutor.com%2Fdownload%2FAdmissions%2FTMUA%2FTMUA%20Specification%202021.pdf">specification</a></li> <li>do all the past papers <em>without looking at solutions</em> – there aren’t many so don’t waste them</li> </ul> <h1 id="the-interview">The Interview</h1> <p>Colleges handle interviews separately and there is year-on-year variation. I therefore cannot give overly specific advice, but rather general themes which held across most or all interviews I’m aware of.</p> <h2 id="theres-a-lot-of-incorrect-information-about-interview-questions">There’s a lot of incorrect information about interview questions</h2> <p>Most practice interview material you can find online is <a href="https://sites.google.com/site/oxbridgeinterviewquestions/computer-science">unrealistic</a>. There’s a limited number of possible good computer science interview questions, so top universities don’t like publishing large repositories of them. </p> <p>The Cambridge interview process consists of a few multi-part questions. Questions are computer science or maths problems which usually are phrased using real-world examples to make them answerable using only maths: think ‘Alice has a box and a coin, Bob has a padlock’ rather than ‘Alice has a public key, a private key and a message she wants to send to Bob’.</p> <p>The first part of many questions easy and designed to verify that the candidate has understood the problem. The last part of a question is sometimes <em>very</em> difficult or materially unsolvable.</p> <p>Some colleges, but not many, will make one of the questions depend on something mentioned in your CV. Most will not. It’s possible, but very rare, to get a direct personal question i.e. ‘why are you better than other applicants’ is the worst I’ve heard of.</p> <h2 id="check-if-your-college-uses-csat">Check if your college uses CSAT</h2> <p>Some colleges use CSAT: a written exam. Make sure you know whether your college requires CSAT. Colleges which use CSAT sometimes go through CSAT answers as part of the interview.</p> <h2 id="realistic-interview-preparation-resources">Realistic interview preparation resources</h2> <p>Here are some resources which I think are more realistic and useful.</p> <ul> <li>A Level maths: you should be familiar with all topics in A Level maths</li> <li><a href="https://openclimb.io/practice/#papers">CSAT</a></li> <li>Oxford has some <a href="https://www.cs.ox.ac.uk/admissions/undergraduate/how_to_apply/sample_interview_problem.html">examples</a></li> <li><a href="https://www.maths.ox.ac.uk/study-here/undergraduate-study/maths-admissions-test/mat-past-papers">MAT</a> contains relevant questions</li> <li>some <a href="https://stepdatabase.maths.org/">STEP questions</a> are relevant </li> <li>old <a href="https://www.olympiad.org.uk/problems.html">BIO questions</a> are relevant</li> <li><strong>ask competent teachers</strong> for resources</li> </ul>]]></content><author><name></name></author><category term="guides"/><category term="cambridge"/><summary type="html"><![CDATA[A slightly formatted brain dump of everything I know about Cambridge applications]]></summary></entry></feed>